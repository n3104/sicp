#lang planet neil/sicp

(#%require (only racket include))
(include "./ch5-regsim.rkt")
(set! make-stack make-stack-with-monitor)

(include "./ch5-syntax.rkt")
(include "./ch5-eceval-support.rkt")

(define (lexical-address-lookup address env)
  (define (lookup-frame frame-number env)
    (define (frame-itr counter env)
      (if (eq? env the-empty-environment)
          (error "Unbound variable" address)
          (let ((frame (first-frame env)))
            (if (eq? counter frame-number)
                frame
                (frame-itr (+ counter 1) (enclosing-environment env))))))
    (frame-itr 0 env))
  (define (lookup-value displacement-number frame)
    (define (variable-itr counter vars vals)
      (cond ((null? vars)
             (error "Unbound variable" address))
            ((eq? counter displacement-number)
             (let ((value (car vals)))
               (if (eq? value '*unassigned*)
                   (error "Unbound variable" address)
                   value)))
            (else
             (variable-itr (+ counter 1) (cdr vars) (cdr vals)))))
    (variable-itr 0 (frame-variables frame) (frame-values frame)))
  (let ((frame-number (car address)) (displacement-number (cadr address)))
    (let ((frame (lookup-frame frame-number env)))
      (lookup-value displacement-number frame))))

(define (lexical-address-set! address val env)
  (define (lookup-frame frame-number env)
    (define (frame-itr counter env)
      (if (eq? env the-empty-environment)
          (error "Unbound variable" address)
          (let ((frame (first-frame env)))
            (if (eq? counter frame-number)
                frame
                (frame-itr (+ counter 1) (enclosing-environment env))))))
    (frame-itr 0 env))
  (define (lookup-value displacement-number frame)
    (define (variable-itr counter vars vals)
      (cond ((null? vars)
             (error "Unbound variable" address))
            ((eq? counter displacement-number)
             (set-car! vals val))
            (else
             (variable-itr (+ counter 1) (cdr vars) (cdr vals)))))
    (variable-itr 0 (frame-variables frame) (frame-values frame)))
  (let ((frame-number (car address)) (displacement-number (cadr address)))
    (let ((frame (lookup-frame frame-number env)))
      (lookup-value displacement-number frame))))